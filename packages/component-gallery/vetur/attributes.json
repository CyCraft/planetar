{
  "component-expose/componentFilesList": {
    "type": "array",
    "description": "You need to pass whatever is returned by `require.context('src/components', true, /^\\.\\/.*(\\.vue)$/).keys()`"
  },
  "component-expose/interactivePreview": {
    "type": "boolean",
    "description": "If you don't want an interactive preview you can set this to false"
  },
  "component-expose/previewBg": {
    "type": "string",
    "description": "Background color for the interactive preview section"
  },
  "component-gallery/componentFilesList": {
    "type": "array",
    "description": "You need to pass whatever is returned by `require.context('src/components', true, /^\\.\\/.*(\\.vue)$/).keys()`"
  },
  "component-gallery/interactivePreviewFor": {
    "type": "array",
    "description": "If you only want to include the interactive preview for certain components, you can pass an array of strings with the component names. Eg. `['Button']` would include the interactive preview ONLY for components with `Button` in its name."
  },
  "component-gallery/noInteractivePreviewFor": {
    "type": "array",
    "description": "If you only want to exclude the interactive preview for certain components, you can pass an array of strings with the component names. Eg. `['Button']` would exclude the interactive preview for ALL components with `Button` in its name."
  },
  "component-gallery/componentNamePreviewBgMap": {
    "type": "{ [componentName: string]: string }",
    "description": "You can give certain components a background for the \"interactive preview\" section, which will be applied like so: `style=\"background: ~~~\"`"
  },
  "component-gallery/formElementPrefix": {
    "type": "string",
    "description": "If you want to separate form element atoms from others, you can pass a prefix like 'My' which will separate any component that starts with 'My', eg. 'MyButton', 'MyInput', etc."
  },
  "component-gallery/exclude": {
    "type": "array",
    "description": "An array of strings to exclude certain components that partially match whatever you define. Eg. `['Button']` would exclude any component with `Button` in its name from the grid."
  },
  "component-gallery/include": {
    "type": "array",
    "description": "An array of strings to include certain components that partially match whatever you define. Eg. `['Button']` would include ONLY components with `Button` in its name."
  },
  "component-picker-card/filePath": {
    "type": "string"
  },
  "component-picker/componentFilesList": {
    "type": "array",
    "description": "You need to pass whatever is returned by `require.context('src/components', true, /^\\.\\/.*(\\.vue)$/).keys()`"
  },
  "component-picker/formElementPrefix": {
    "type": "string",
    "description": "If you want to separate form element atoms from others, you can pass a prefix like 'My' which will separate any component that starts with 'My', eg. 'MyButton', 'MyInput', etc."
  },
  "component-picker/exclude": {
    "type": "array",
    "description": "An array of strings to exclude certain components that partially match whatever you define. Eg. `['Button']` would exclude any component with `Button` in its name from the grid."
  },
  "component-picker/include": {
    "type": "array",
    "description": "An array of strings to include certain components that partially match whatever you define. Eg. `['Button']` would include ONLY components with `Button` in its name."
  }
}